upstream unicorn {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  # for UNIX domain socket setups:
  server unix:{{ unicorn_socket_path }} fail_timeout=0;
}

server {
    listen 80;
    server_name _;

{% if ssl_cert %}
    listen 443 ssl;

    ssl_certificate      /etc/nginx/ssl/{{ ssl_cert }}.pem;
    ssl_certificate_key  /etc/nginx/ssl/{{ ssl_cert }}.key;
    ssl_protocols        SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers          "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
    ssl_session_cache    shared:SSL:5m;
    ssl_session_timeout  10m;

    ssl_prefer_server_ciphers on;

    if ($ssl_protocol = "") {
      rewrite ^/(.*) https://$server_name/$1 permanent;
    }
{% endif %}

    root        {{ deploy_current_release_path }}/public;

    include     mime.types;
    gzip        on;
    gzip_types  text/plain text/css text/javascript
                application/javascript application/json
                application/xml;

    error_page 500 502 503 504 /500.html;
    error_page 404 /404.html;
    error_page 403 /403.html;

    try_files $uri @app;

    location @maintenance {
      rewrite ^(.*)$ /maintenance.html break;
    }

    location @app {
      if (-f $document_root/maintenance.html) {
        return 503;
      }
      error_page 503 @maintenance;

      proxy_pass http://unicorn;

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
    }

}
